        -:    0:Source:p3.c
        -:    0:Graph:p3.gcno
        -:    0:Data:p3.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:struct Pair{
        -:    6:    int first;
        -:    7:    int second;
        -:    8:};
        -:    9:
        -:   10:
        1:   11:int check_add(int hour, int current_hour[])
        -:   12:{
       25:   13:    for(int i = 0; i < 24; ++i)
        -:   14:    {
       24:   15:        if(abs(hour - current_hour[i]) < 3)
        -:   16:        {
    #####:   17:            return 1;
        -:   18:        }
        -:   19:    }
        1:   20:    return 0;
        -:   21:}
        -:   22:
        1:   23:int main()
        -:   24:{
        -:   25:    char instruct[128];
        -:   26:    struct Pair plan[24];
       25:   27:    for(int i = 0; i < 24; ++i)
        -:   28:    {
       24:   29:        plan[i].first = -24;
       24:   30:        plan[i].second = 0;
        -:   31:    }
        1:   32:    int current_cal = 0;
        -:   33:    int current_hour[24];
       25:   34:    for(int i = 0; i < 24; ++i)
        -:   35:    {
       24:   36:        current_hour[i] = -24;
        -:   37:    }
        1:   38:    printf("$ ");
        1:   39:    fgets(instruct, 128, stdin);
        -:   40:    while(1){
        2:   41:        if(instruct[0] != '\n')
        -:   42:        {
        2:   43:            if(strcmp(instruct, "quit\n") == 0)
        -:   44:            {
        1:   45:                break;
        -:   46:            }
        -:   47:            else
        -:   48:            {
        1:   49:                char *action = strtok(instruct, " \n");
        -:   50:                // printf("action is: %s\n", action);
        1:   51:                if(strcmp(action, "add") == 0)
        -:   52:                {
        1:   53:                    char *cal = strtok(NULL, " ");
        1:   54:                    char *time = strtok(NULL, " ");
        -:   55:                    // printf("\n the cal is: %s, the time is %s", cal, time);
        1:   56:                    int time_pos = atoi(time);
        1:   57:                    int cal_int = atoi(cal);
        1:   58:                    if(check_add(time_pos, current_hour) == 0)
        -:   59:                    {
        1:   60:                        if(2501 > current_cal + cal_int)
        -:   61:                        {
        1:   62:                            plan[time_pos].first = time_pos;
        1:   63:                            plan[time_pos].second = cal_int;
        1:   64:                            current_hour[time_pos] = time_pos;
        1:   65:                            current_cal += cal_int;
        -:   66:                            // printf("Now the current cal is %d\n", current_cal);
        -:   67:                        }
        -:   68:                        else
        -:   69:                        {
    #####:   70:                            printf("Error: Caloric intake exceeds the 2500 calories limit.\n");
        -:   71:                        }
        -:   72:                    }
        -:   73:                    else
        -:   74:                    {
    #####:   75:                        printf("Error: Cannot have multiple meals in less than 3 hours.\n");
        -:   76:                    }
        -:   77:                }
    #####:   78:                else if(strcmp(action, "replace") == 0)
        -:   79:                {
    #####:   80:                    char *cal = strtok(NULL, " ");
    #####:   81:                    char *time = strtok(NULL, " ");
        -:   82:                    // printf("the cal is: %s, the time is %s", cal, time);
    #####:   83:                    int time_pos = atoi(time);
    #####:   84:                    int cal_int = atoi(cal);
    #####:   85:                    if(current_hour[time_pos] != -24)
        -:   86:                    {
    #####:   87:                        if(2501 > current_cal - plan[time_pos].second + cal_int)
        -:   88:                        {
    #####:   89:                            current_cal -= plan[time_pos].second;
    #####:   90:                            plan[time_pos].second = cal_int;
    #####:   91:                            current_cal += cal_int;
        -:   92:                            // printf("Now the current cal is %d\n", current_cal);
        -:   93:                        }
        -:   94:                        else
        -:   95:                        {
    #####:   96:                            printf("Error: Caloric intake exceeds the 2500 calories limit.\n");
        -:   97:                        }
        -:   98:                    }
        -:   99:                    else
        -:  100:                    {
    #####:  101:                        printf("Error: Meal does not exist in the record.\n");
        -:  102:                    }
        -:  103:                }
    #####:  104:                else if(strcmp(action, "printplan") == 0)
        -:  105:                {
    #####:  106:                    for(int i = 0; i < 24; ++i)
        -:  107:                    {
    #####:  108:                        if(plan[i].first != -24)
        -:  109:                        {
    #####:  110:                            printf("%d %d\n", plan[i].first, plan[i].second);
        -:  111:                        }
        -:  112:                    }
        -:  113:                }
        -:  114:                
        -:  115:            }
        -:  116:        }
        1:  117:        printf("$ ");
        1:  118:        fgets(instruct, 128, stdin);
        -:  119:    }
        1:  120:    return 0;
        -:  121:}
